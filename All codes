/*------------------8051-LED BANK---------------------*/

#include<reg51.h> //header file included
void delay(unsigned int time); //delay function declaration
void main()
{
  unsigned int i;
  	while(1) //infinite loop for continuous saw tooth waveform generation
{
     			P2 = 0x55;
			delay(100);//delay function call
          P2 = 0xAA;
			delay(100);//delay function call
	}
}
	
void delay(unsigned int time) //for delay generation
{
unsigned int i,j;
for(i=0;i<time;i++)
for(j=0;j<1275;j++);
}





/*------------------8051-SEVEN SEGMENT---------------------*/


#include<reg51.h>

void delay(long int x)
{
    int i,j;
	for(i=0; i<x; i++)
	{
	
	}
}

unsigned char arr[10] = {0xF6,0x90,0xE5,0xB5,0x93,0x37,0x77,0x94,0xF7,0xB7};

void main()
{
  while(1)
	{
	int i;
   for(i=0; i<=9; i++)
   
   {
      P0 =  ~arr[i];
		 delay(5000);
		 
    }
  }
}


















/*------------------8051-STEPPER MOTOR---------------------*/

#include<reg51.h>
unsigned int STEP[] = {8,4,2,1};
void delayms(unsigned long  x)
{
   unsigned int i;
   for(i=0;i<=x;i++);
}
void main(void)
{ unsigned char k;
     while(1)
	   { for(k=0; k<3;k++)
	   {
				P1= ~STEP[k];
				delayms(5);
		 }
		 } 
}








/*------------------8051-LCD---------------------*/
/*

Interfacing Pins : 
	P0.0 thru P0.7 interfaced to D0 thru D7.
	P3.2 ----> LCD_RS (Register Select).
	P3.3 ----> LCD_EN (Enable).
-----------------------------------------------------------------------------
Jumper Settings:
	J1:2-3	J2:1-2	J3:2-3	J4:1-2	J5:1-2	J6:1-2 
=============================================================================
*/

 
#include<REG51.h>

//#define Enable 0x08
//#define RS 0x04

sbit en = P3^3;
sbit rs = P3^2;

void DelayMs(delay)
{
int i,j;
	for(i=0;i<delay;i++)
	{
	 for(j=0;j<100;j++);
	}
}

void write_lcd_data(value)
{
   	/* data for lcd  */
	P0 = value;
	rs = 1;
	en = 1;
	DelayMs(10);
	en = 0;

}

void write_lcd_command(value)
{
 /* command for lcd */

	P0 = value;
	rs = 0;
	en = 1;
	DelayMs(10);
	en = 0;

}


void main(void)
{
P0 = 0x00;
P3 = 0x00;
while(1)
{
write_lcd_command(0x38); //function set
DelayMs(100);
write_lcd_command(0x0E); //display off
DelayMs(100);
write_lcd_command(0x01); //display clear
DelayMs(100);
write_lcd_command(0x06); //entry mode set
DelayMs(100);
write_lcd_command(0x0F); //display on 
DelayMs(100);
write_lcd_command(0x80); //set address counter value
DelayMs(100);
	
write_lcd_data('M');
DelayMs(100);
write_lcd_data('I');
DelayMs(100);
write_lcd_data('C');
DelayMs(100);
write_lcd_data('R');
DelayMs(100);
write_lcd_data('O');
DelayMs(100);
write_lcd_data('C');
DelayMs(100);
write_lcd_data('O');
DelayMs(100);
write_lcd_data('N');
DelayMs(100);
write_lcd_data('T');
DelayMs(100);
write_lcd_data('R');
DelayMs(100);
write_lcd_data('O');
DelayMs(100);
write_lcd_data('L');
DelayMs(100);
write_lcd_data('L');
DelayMs(100);
write_lcd_data('E');
DelayMs(100);
write_lcd_data('R');
DelayMs(100);


}

}













/*------------------MSP-LED---------------------*/

/* Main.c file generated by New Project wizard
 *
 * Created:   Thu Sep 28 2023
 * Processor: MSP430G2553
 * Compiler:  GCC for MSP430
 */

#include <MSP430.h>


int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // Stop the Watchdog Timer

    P1DIR |= BIT0;              // Set P1.0 as an output
    P1OUT &= ~BIT0;             // Turn off the LED initially
    int i;
    while(1)
    {
        P1OUT ^= BIT0;          // Toggle the LED (on/off)
        for (i=0;i<1000;i++); // Delay for a while (adjust this value for desired LED blink rate)
    }
}
/*------------------MSP-LED-BUTTON---------------------*/

#include <msp430.h>

#define LED1_PIN     BIT0        // P3.0 is the LED1 pin
#define LED2_PIN     BIT1        // P3.1 is the LED2 pin
#define BUTTON_PIN  BIT0        // P1.3 is the button pin

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // Stop the watchdog timer

    P3DIR |= LED1_PIN + LED2_PIN ;           // Set LED1 pin as an output
    P3OUT &= ~LED1_PIN + LED2_PIN;          // Initialize LED1 pin low and LED2 pin High
    

    P1DIR &= ~BUTTON_PIN;       // Set button pin as an input
    
    //P1REN |= BUTTON_PIN;        // Enable internal resistor for button
    //P1OUT |= BUTTON_PIN;        // Set the resistor as a pull-up resistor

    while (1)
    {
        if ((P1IN & BUTTON_PIN)==0x01)  // Check if the button is pressed
        {
            P3OUT ^= LED1_PIN;     // Toggle the LED
            __delay_cycles(100);  // Delay for button debounce
        }
	else
	{
	      P3OUT ^= LED2_PIN;     // Toggle the LED
            __delay_cycles(100);  // Delay for button debounce
	}
    }
}















/*------------------MSP-DC MOTOR---------------------*/


#include <msp430.h>

#define IN1_PIN     BIT0    // GPIO pin for IN1
#define IN2_PIN     BIT1    // GPIO pin for IN2
#define EN1_PIN     BIT2    // GPIO pin for EN1 (PWM)

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // Stop the watchdog timer

    P1DIR |= IN1_PIN | IN2_PIN | EN1_PIN; // Set pins as outputs

    P1OUT &= ~(IN1_PIN | IN2_PIN); // Initialize IN1 and IN2 low
    //P1SEL |= EN1_PIN; // Enable PWM on EN1 pin
    P1OUT |= EN1_PIN; // Initialize EN1 high

    
     int i;
    while (1)
    {
        // Forward rotation
        P1OUT |= IN1_PIN;
        P1OUT &= ~IN2_PIN;

        // Control motor speed by changing TACCR1 value
        for(i=0;i<10000;i++); // Delay for a while

        // Reverse rotation
        P1OUT &= ~IN1_PIN;
        P1OUT |= IN2_PIN;

        // Control motor speed by changing TACCR1 value
        for(i=0;i<10000;i++); // Delay for a while
    }
}













/*------------------MSP-IR SENSOR---------------------*/


/* Main.c file generated by New Project wizard
 *
 * Created:   Thu Sep 28 2023
 * Processor: MSP430G2553
 * Compiler:  GCC for MSP430
 */

#include <msp430.h>

#define IR_SENSOR_PIN   BIT0 // Input from IR sensor (adjust as needed)
#define BUZZER_PIN      BIT1 // Output to control buzzer (adjust as needed)

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD; // Stop the Watchdog Timer

    P1DIR &= ~IR_SENSOR_PIN;  // Set IR sensor pin as input
    P1REN |= IR_SENSOR_PIN;   // Enable pull-up resistor on IR sensor pin
    P1OUT |= IR_SENSOR_PIN;   // Set pull-up resistor

    P1DIR |= BUZZER_PIN;      // Set buzzer pin as output
    P1OUT &= ~BUZZER_PIN;     // Initially turn off the buzzer
    int i;
    while (1)
    {
        if ((P1IN & IR_SENSOR_PIN)) // Check if IR sensor output is High (object detected)
        {
            P1OUT |= BUZZER_PIN;   // Turn on the buzzer
           for(i=0;i<100;i++); // Delay to avoid rapid toggling (adjust as needed)
        }
        else
        {
            P1OUT &= ~BUZZER_PIN;  // Turn off the buzzer
        }
    }
}











/*------------------MSP-LED-PWM---------------------*/



#include <msp430.h> 

#define GREEN   BIT6                        // Green LED -> P1.6

/**
 * @brief
 * These settings are w.r.t enabling TIMER0 on Lunchbox
 **/
void register_settings_for_TIMER0()
{
    P1DIR |= GREEN;                         // Green LED -> Output
    P1SEL |= GREEN;                         // Green LED -> Select Timer Output

    CCR0 = 255;                             // Set Timer0 PWM Period
    CCTL1 = OUTMOD_7;                       // Set TA0.1 Waveform Mode - Clear on Compare, Set on Overflow
    CCR1 = 0;                               // Set TA0.1 PWM duty cycle
    CCTL0 = CCIE;                           // CCR0 Enable Interrupt
    TACTL = TASSEL_2 + MC_1;                // Timer Clock -> SMCLK, Mode -> Up Count
}

/**
 * @brief
 * Entry point for the code
 **/
void main(void) {

    WDTCTL = WDTPW | WDTHOLD;               // Stop watchdog timer

    register_settings_for_TIMER0();

    __bis_SR_register(GIE);                 // Enable CPU Interrupt

    while(1)
    {
    }

}

/**
 * @brief
 * Entry point for TIMER0_interrupt vector
 **/
#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer_A(void)
{
    CCR1 = CCR1 + 1;                        // Increment CCR1
    if(CCR1 == 256)
    {
        CCR1 = 0;
    }
}
